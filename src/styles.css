@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import enhanced animations */
@import url('./utils/animations.css');

/* Import tier-specific animations for complex effects */
@import url('./styles/tier-animations.css');

@layer base {
  /* CUSTOM CSS: Base font size override - not available as Tailwind utility */
  html {
    font-size: 15px;
  }
}

@layer components {

  /* 
   * CUSTOM CSS: Tier Display Dynamic Theming
   * Why CSS over Tailwind:
   * - Complex multi-color gradients with custom opacity values
   * - Dynamic theming based on parent body class (.tier-*)
   * - Tailwind arbitrary selectors would create verbose, unmaintainable HTML
   * - Component-level styling better suited for CSS modules approach
   * - Enterprise pattern: complex theming logic belongs in CSS, not HTML
   */
  .tier-bronze .tier-display-container {
    background: linear-gradient(135deg, rgba(205, 127, 50, 0.2), rgba(184, 134, 11, 0.3));
    border-color: #cd7f32;
    color: #fbbf24;
  }

  .tier-silver .tier-display-container {
    background: linear-gradient(135deg, rgba(192, 192, 192, 0.2), rgba(229, 231, 235, 0.3));
    border-color: #c0c0c0;
    color: #e5e7eb;
  }

  .tier-gold .tier-display-container {
    background: linear-gradient(135deg, rgba(218, 165, 32, 0.1), rgba(255, 179, 71, 0.15));
    border-color: #daa520;
    color: #fbbf24;
    box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);
  }

  .tier-platinum .tier-display-container {
    background: linear-gradient(135deg, rgba(229, 231, 235, 0.3), rgba(255, 255, 255, 0.4));
    border-color: #e5e7eb;
    color: #f8fafc;
    box-shadow: 0 6px 16px rgba(229, 231, 235, 0.4);
  }

  .tier-diamond .tier-display-container {
    background: linear-gradient(135deg, rgba(255, 0, 128, 0.2), rgba(0, 255, 255, 0.2), rgba(255, 255, 0, 0.2));
    border: 2px solid transparent;
    color: white;
    width: fit-content;
    max-width: fit-content;
  }

  /* 
   * CUSTOM CSS: Tier-themed horizontal separator
   * Why CSS over Tailwind:
   * - Dynamic theming based on parent body class (.tier-*)
   * - Custom height (4px) not available in Tailwind utilities
   * - Diamond tier uses complex multi-color gradient
   * - Cleaner to maintain as component CSS vs scattered HTML classes
   */
  .tier-separator {
    width: 100%;
    height: 4px;
    background-color: #6b7280; /* gray-500 default */
  }

  .tier-bronze .tier-separator {
    background-color: #cd7f32;
  }

  .tier-silver .tier-separator {
    background-color: #c0c0c0;
  }

  .tier-gold .tier-separator {
    background-color: #daa520;
  }

  .tier-platinum .tier-separator {
    background-color: #e5e7eb;
  }

  .tier-diamond .tier-separator {
    background: linear-gradient(90deg, #ff0080, #00ffff, #ffff00);
  }

  /* 
   * CUSTOM CSS: Modal backdrop blur effect
   * Why CSS over Tailwind: backdrop-filter not fully supported in all Tailwind versions
   */
  .modal-backdrop {
    backdrop-filter: blur(4px);
  }

  /* 
   * CUSTOM CSS: Custom scrollbar styling for modal
   * Why CSS over Tailwind: 
   * - Webkit pseudo-elements (::-webkit-scrollbar) not supported by Tailwind
   * - Browser-specific styling requires vendor prefixes
   * - Complex multi-part scrollbar styling (track, thumb, hover states)
   */
  .modal::-webkit-scrollbar {
    width: 8px;
  }

  .modal::-webkit-scrollbar-track {
    background-color: #f3f4f6;
    border-radius: 9999px;
  }

  .modal::-webkit-scrollbar-thumb {
    background-color: #9ca3af;
    border-radius: 9999px;
  }

  .modal::-webkit-scrollbar-thumb:hover {
    background-color: #6b7280;
  }

  /* 
   * CUSTOM CSS: Number input spin button removal
   * Why CSS over Tailwind:
   * - Webkit pseudo-elements (::-webkit-inner-spin-button) not supported by Tailwind
   * - Browser-specific appearance properties require vendor prefixes
   * - Cross-browser input styling needs specific selectors and properties
   */
  input[type='number']::-webkit-inner-spin-button,
  input[type='number']::-webkit-outer-spin-button {
    -webkit-appearance: none;
    appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield;
    appearance: textfield;
  }

  /* 
   * CUSTOM CSS: Number input placeholder styling
   * Why CSS over Tailwind: Complex pseudo-element styling with custom opacity values
   */
  .number-input::placeholder {
    color: rgb(31 41 55);
    opacity: 0.7;
  }

  /* 
   * CUSTOM CSS: Dark mode input styling with tier overrides
   * Why CSS over Tailwind:
   * - Complex data-attribute selectors ([data-theme="dark"]) 
   * - Multi-level selector combinations (theme + tier + component)
   * - Tailwind dark: modifier doesn't support custom data attributes
   * - Cascade management for tier-specific contrast adjustments
   * - !important needed to override inline styles from JS
   */
  [data-theme="dark"] .modal .number-input,
  [data-theme="dark"] .modal input[type="number"] {
    color: white !important;
  }

  [data-theme="dark"] .modal .number-input::placeholder,
  [data-theme="dark"] .modal input[type="number"]::placeholder {
    color: white !important;
    opacity: 0.7;
  }

  /* Override for when tier classes are applied - use dark text for better contrast */
  [data-theme="dark"] .tier-bronze .modal .number-input,
  [data-theme="dark"] .tier-silver .modal .number-input,
  [data-theme="dark"] .tier-gold .modal .number-input,
  [data-theme="dark"] .tier-platinum .modal .number-input,
  [data-theme="dark"] .tier-diamond .modal .number-input,
  [data-theme="dark"] .tier-bronze .modal input[type="number"],
  [data-theme="dark"] .tier-silver .modal input[type="number"],
  [data-theme="dark"] .tier-gold .modal input[type="number"],
  [data-theme="dark"] .tier-platinum .modal input[type="number"],
  [data-theme="dark"] .tier-diamond .modal input[type="number"] {
    color: rgb(31 41 55) !important;
  }

  [data-theme="dark"] .tier-bronze .modal .number-input::placeholder,
  [data-theme="dark"] .tier-silver .modal .number-input::placeholder,
  [data-theme="dark"] .tier-gold .modal .number-input::placeholder,
  [data-theme="dark"] .tier-platinum .modal .number-input::placeholder,
  [data-theme="dark"] .tier-diamond .modal .number-input::placeholder,
  [data-theme="dark"] .tier-bronze .modal input[type="number"]::placeholder,
  [data-theme="dark"] .tier-silver .modal input[type="number"]::placeholder,
  [data-theme="dark"] .tier-gold .modal input[type="number"]::placeholder,
  [data-theme="dark"] .tier-platinum .modal input[type="number"]::placeholder,
  [data-theme="dark"] .tier-diamond .modal input[type="number"]::placeholder {
    color: rgb(31 41 55) !important;
    opacity: 0.7;
  }

  /* 
   * CUSTOM CSS: Range slider custom styling
   * Why CSS over Tailwind:
   * - Webkit/Mozilla pseudo-elements (::-webkit-slider-thumb, ::-moz-range-thumb)
   * - Browser-specific appearance reset properties
   * - Cross-browser slider customization requires vendor-specific selectors
   * - Tailwind doesn't support range input pseudo-element styling
   */
  input[type='range'] {
    -webkit-appearance: none;
    appearance: none;
  }

  input[type='range']::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 1rem;
    height: 1rem;
    background-color: #2563eb;
    border-radius: 9999px;
    cursor: pointer;
  }

  input[type='range']::-moz-range-thumb {
    width: 1rem;
    height: 1rem;
    background-color: #2563eb;
    border-radius: 9999px;
    cursor: pointer;
    border: 0;
  }

  /* 
   * CUSTOM CSS: Enhanced accessibility focus indicators
   * Why CSS over Tailwind:
   * - :focus-visible pseudo-class with complex multi-element selectors
   * - Custom box-shadow with multiple layers
   * - ARIA role selectors ([role='tab']) not supported by Tailwind
   * - Accessibility-specific styling requires precise control
   */
  .modal button:focus-visible,
  .modal input:focus-visible,
  .modal select:focus-visible,
  .modal textarea:focus-visible,
  [role='tab']:focus-visible,
  [role='button']:focus-visible {
    outline: none;
    box-shadow:
      0 0 0 2px #3b82f6,
      0 0 0 4px rgba(59, 130, 246, 0.2);
  }

  /* 
   * CUSTOM CSS: High contrast accessibility mode
   * Why CSS over Tailwind:
   * - Media query @media (prefers-contrast: high) not supported by Tailwind
   * - Accessibility override patterns require cascade control
   */
  @media (prefers-contrast: high) {
    .modal button:focus-visible,
    .modal input:focus-visible,
    .modal select:focus-visible,
    .modal textarea:focus-visible,
    [role='tab']:focus-visible,
    [role='button']:focus-visible {
      outline: 3px solid #000;
      outline-offset: 2px;
      box-shadow: none;
    }
  }

  /* 
   * CUSTOM CSS: Screen reader accessibility utilities
   * Why CSS over Tailwind:
   * - Complex accessibility pattern with multiple property resets
   * - Legacy clip property not supported by Tailwind
   * - Focus state requires precise property restoration
   * - Standard accessibility implementation pattern
   * Note: Tailwind has sr-only but this is more comprehensive
   */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .sr-only:focus,
  .focus\:not-sr-only:focus {
    position: static;
    width: auto;
    height: auto;
    padding: inherit;
    margin: inherit;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }

  /* 
   * CUSTOM CSS: Keyboard navigation focus indicators
   * Why CSS over Tailwind:
   * - ::after pseudo-element with content property
   * - Complex positioning with negative values
   * - Custom border styling with pointer-events
   * - Tailwind doesn't support ::after with content generation
   */
  .tab-btn:focus,
  .result-tab-btn:focus {
    position: relative;
  }

  .tab-btn:focus::after,
  .result-tab-btn:focus::after {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    border: 2px solid #3b82f6;
    border-radius: 4px;
    pointer-events: none;
  }

  /* 
   * CUSTOM CSS: Reduced motion accessibility
   * Why CSS over Tailwind:
   * - Media query @media (prefers-reduced-motion: reduce) not supported by Tailwind
   * - Universal selector (*) with pseudo-element targeting
   * - Accessibility requirement to override all animations/transitions
   * - !important needed to override component-specific animations
   */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }

  /* 
   * CUSTOM CSS: High contrast mode accessibility overrides
   * Why CSS over Tailwind:
   * - Media query @media (prefers-contrast: high) not supported by Tailwind
   * - Overriding existing Tailwind classes with !important
   * - Accessibility compliance requires specific contrast ratios
   * - Systematic color override patterns for accessibility
   */
  @media (prefers-contrast: high) {
    .bg-white {
      background-color: #fff !important;
      color: #000 !important;
    }

    .bg-gray-800 {
      background-color: #000 !important;
      color: #fff !important;
    }

    .text-gray-600,
    .text-gray-700,
    .text-gray-800 {
      color: #000 !important;
    }

    .text-gray-100,
    .text-gray-200,
    .text-gray-300 {
      color: #fff !important;
    }

    .border-gray-300,
    .border-gray-600 {
      border-color: #000 !important;
    }
  }
}
